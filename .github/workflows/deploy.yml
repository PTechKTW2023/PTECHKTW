name: Build, Run EF Core Migrations, and Deploy (.NET 9.0) with OIDC Debugging

on:
  push:
    branches:
      - release  # Trigger workflow on push to the release branch

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Required to checkout the repo

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: release  # Ensure the workflow runs on the release branch

      # Debug: Print GitHub Context
      - name: Debug GitHub Context
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Ref: $GITHUB_REF"
          echo "Actor: $GITHUB_ACTOR"
          echo "SHA: $GITHUB_SHA"

      # Authenticate with Azure using OIDC
      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: fd4296f4-bdfb-4544-8203-c0fac560a7a0  # App ID
          tenant-id: a3fb7c77-7f12-4e8c-9864-240eadfb4fdb  # Azure Tenant ID
          subscription-id: 2fe4631b-3ade-4eda-bf70-a1dd7f0a86c1  # Subscription ID
          enable-AzPSSession: false
          audience: api://AzureADTokenExchange  # Explicitly set the audience

      # Debug: Fetch and Print OIDC Token
      - name: Request OIDC Token
        id: oidc-token
        run: |
          echo "Fetching OIDC token..."
          TOKEN=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange")
          echo "OIDC Token: $TOKEN"

      # Retrieve secrets from Azure Key Vault
      - name: Get Secrets from Azure Key Vault
        id: keyvault
        run: |
          # Retrieve MSDeploy Username
          MSDEPLOY_USERNAME=$(az keyvault secret show --name "MSDEPLOY-USERNAME" --vault-name "Booker" --query value -o tsv)
          echo "::add-mask::$MSDEPLOY_USERNAME"
          echo "MSDEPLOY_USERNAME=$MSDEPLOY_USERNAME" >> $GITHUB_ENV

          # Retrieve MSDeploy Password
          MSDEPLOY_PASSWORD=$(az keyvault secret show --name "MSDEPLOY-PASSWORD" --vault-name "Booker" --query value -o tsv)
          echo "::add-mask::$MSDEPLOY_PASSWORD"
          echo "MSDEPLOY_PASSWORD=$MSDEPLOY_PASSWORD" >> $GITHUB_ENV

          # Retrieve MSDeploy Service URL
          MSDEPLOY_SERVICE_URL=$(az keyvault secret show --name "MSDEPLOY-SERVICE-URL" --vault-name "Booker" --query value -o tsv)
          echo "MSDEPLOY_SERVICE_URL=$MSDEPLOY_SERVICE_URL" >> $GITHUB_ENV

          # Retrieve IIS App Path
          MSDEPLOY_IIS_APP_PATH=$(az keyvault secret show --name "MSDEPLOY-IIS-APP-PATH" --vault-name "Booker" --query value -o tsv)
          echo "MSDEPLOY_IIS_APP_PATH=$MSDEPLOY_IIS_APP_PATH" >> $GITHUB_ENV

          # Retrieve Database Connection String
          DB_CONNECTION_STRING=$(az keyvault secret show --name "DB-CONNECTION-STRING" --vault-name "Booker" --query value -o tsv)
          echo "::add-mask::$DB_CONNECTION_STRING"
          echo "DB_CONNECTION_STRING=$DB_CONNECTION_STRING" >> $GITHUB_ENV

      # Setup .NET 9.0 SDK
      - name: Setup .NET 9.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      # Restore dependencies
      - name: Restore Dependencies
        run: dotnet restore ./Booker/Booker.sln

      # Run EF Core Migrations
      - name: Run EF Core Migrations
        run: |
          dotnet tool install --global dotnet-ef
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet ef database update --project ./Booker/Booker.csproj --connection "$DB_CONNECTION_STRING"

      # Build and Deploy Using MSDeploy
      - name: Build and Deploy Using MSDeploy
        run: |
          dotnet build ./Booker/Booker.sln \
          /p:DeployOnBuild=True \
          /p:WebPublishMethod=MSDeploy \
          /p:MSDeployPublishMethod=WMSVC \
          /p:MSDeployServiceUrl=$MSDEPLOY_SERVICE_URL \
          /p:UserName=$MSDEPLOY_USERNAME \
          /p:Password=$MSDEPLOY_PASSWORD \
          /p:DeployIISAppPath=$MSDEPLOY_IIS_APP_PATH \
          /p:SkipExtraFilesOnServer=False \
          /p:OutputPath=$(build.artifactstagingdirectory)
