name: Build, Run EF Core Migrations, and Deploy (.NET 9.0) with OIDC Debugging

on:
  push:
    branches:
      - release  # Trigger workflow on push to the release branch

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Required to checkout the repo

jobs:
  build-deploy:
    runs-on: ubuntu-22.04

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: release  # Ensure the workflow runs on the release branch      

      # Authenticate with Azure using OIDC
      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: fd4296f4-bdfb-4544-8203-c0fac560a7a0  # App ID
          tenant-id: a3fb7c77-7f12-4e8c-9864-240eadfb4fdb  # Azure Tenant ID
          subscription-id: 2fe4631b-3ade-4eda-bf70-a1dd7f0a86c1  # Subscription ID
          enable-AzPSSession: false
          audience: api://AzureADTokenExchange  # Explicitly set the audience      
      # Retrieve secrets from Azure Key Vault
      - name: Get Secrets from Azure Key Vault
        id: keyvault
        run: |
          # Retrieve MSDeploy Username
          MSDEPLOY_USERNAME=$(az keyvault secret show --name "MSDEPLOY-USERNAME" --vault-name "Booker" --query value -o tsv)
          echo "::add-mask::$MSDEPLOY_USERNAME"
          echo "MSDEPLOY_USERNAME=$MSDEPLOY_USERNAME" >> $GITHUB_ENV

          # Retrieve MSDeploy Password
          MSDEPLOY_PASSWORD=$(az keyvault secret show --name "MSDEPLOY-PASSWORD" --vault-name "Booker" --query value -o tsv)
          echo "::add-mask::$MSDEPLOY_PASSWORD"
          echo "MSDEPLOY_PASSWORD=$MSDEPLOY_PASSWORD" >> $GITHUB_ENV

          # Retrieve MSDeploy Service URL
          MSDEPLOY_SERVICE_URL=$(az keyvault secret show --name "MSDEPLOY-SERVICE-URL" --vault-name "Booker" --query value -o tsv)
          echo "MSDEPLOY_SERVICE_URL=$MSDEPLOY_SERVICE_URL" >> $GITHUB_ENV

          # Retrieve IIS App Path
          MSDEPLOY_IIS_APP_PATH=$(az keyvault secret show --name "MSDEPLOY-IIS-APP-PATH" --vault-name "Booker" --query value -o tsv)
          echo "MSDEPLOY_IIS_APP_PATH=$MSDEPLOY_IIS_APP_PATH" >> $GITHUB_ENV

          # Retrieve Database Connection Details
          DB_HOST=$(az keyvault secret show --name "DB-HOST" --vault-name "Booker" --query value -o tsv)
          DB_PORT=$(az keyvault secret show --name "DB-PORT" --vault-name "Booker" --query value -o tsv)
          DB_NAME=$(az keyvault secret show --name "DB-NAME" --vault-name "Booker" --query value -o tsv)
          DB_USER=$(az keyvault secret show --name "DB-USER" --vault-name "Booker" --query value -o tsv)
          DB_PASS=$(az keyvault secret show --name "DB-PASSWORD" --vault-name "Booker" --query value -o tsv)

          echo "::add-mask::$DB_PASS"
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV

      # Install SQLCMD for SQL Connection Check
      - name: Install SQLCMD
        run: |        
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $GITHUB_ENV

      # Check SQL Server Connection Using Retrieved Secrets
      - name: Test SQL Server Connection
        run: |
          echo "Testing SQL Server connection..."
          /opt/mssql-tools/bin/sqlcmd -S $DB_HOST,$DB_PORT -U $DB_USER -P $DB_PASS -d $DB_NAME -C -N -Q "SELECT 'Connection Successful' AS Status" || { echo 'SQL Connection Failed'; exit 1; }

      # Setup .NET SDKs (Install both .NET 9.0.x and .NET 8.0.x)
      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      # Install EF Core CLI globally
      - name: Install dotnet-ef Tool
        run: dotnet tool install --global dotnet-ef

      # Ensure dotnet-ef is in PATH
      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Restore dependencies
      - name: Restore Dependencies
        run: dotnet restore ./Booker/Booker.sln

      # Run EF Core Migrations
      - name: Run EF Core Migrations
        env:
          DB_CONNECTION_STRING: "Data Source=$DB_HOST,$DB_PORT;Initial Catalog=$DB_NAME;User ID=$DB_USER;Password=$DB_PASS;Encrypt=False;TrustServerCertificate=False;MultipleActiveResultSets=True;Application Name=TextBookerApp"
        run: |
          dotnet ef database update --project ./Booker/Booker.csproj --connection "$DB_CONNECTION_STRING"

      # Build and Deploy Using MSDeploy
      - name: Build and Deploy Using MSDeploy
        run: |
          dotnet build ./Booker/Booker.sln \
          /p:DeployOnBuild=True \
          /p:WebPublishMethod=MSDeploy \
          /p:MSDeployPublishMethod=WMSVC \
          /p:MSDeployServiceUrl=$MSDEPLOY_SERVICE_URL \
          /p:UserName=$MSDEPLOY_USERNAME \
          /p:Password=$MSDEPLOY_PASSWORD \
          /p:DeployIISAppPath=$MSDEPLOY_IIS_APP_PATH \
          /p:SkipExtraFilesOnServer=False \
          /p:OutputPath=$(build.artifactstagingdirectory)
